# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
    # specify the version
    - image: circleci/golang:1.15
      environment:
        TEST_DSN: morellistest:testpass@tcp(127.0.0.1:3306)/morellistest?parseTime=true&multiStatements=true
        TEST_REDIS_ADDRESS: 127.0.0.1:6379
    
    - image: circleci/mysql:latest
      environment:
        MYSQL_ROOT_PASSWORD: password
        MYSQL_DATABASE: morellistest
        MYSQL_USER: morellistest
        MYSQL_PASSWORD: testpass

    - image: circleci/redis:latest

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/jcorry/morellis
    steps:
    - checkout

    - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
    - run:
        name: Wait for db
        command: dockerize -wait tcp://127.0.0.1:3306 -timeout 1m
    # specify any bash command here prefixed with `run: `
    - run:
        name: "Create temp dir for artifacts"
        command: |
          mkdir -p /tmp/artifacts
    - run: go get -v -t -d ./...
    - run:
        name: "Create TLS cert files"
        command: |
          mkdir ./tls && cd ./tls && go run $(go env GOROOT)/src/crypto/tls/generate_cert.go --rsa-bits=2048 --host=localhost
    - run:
        command: |
          go test -v -coverprofile=c.out -covermode=atomic ./...
          go tool cover -html=c.out -o coverage.html
          mv coverage.html /tmp/artifacts
          bash <(curl -s https://codecov.io/bash) -f c.out
    - store_artifacts:
        path: /tmp/artifacts