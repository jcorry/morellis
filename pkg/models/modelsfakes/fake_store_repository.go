// Code generated by counterfeiter. DO NOT EDIT.
package modelsfakes

import (
	"sync"

	"github.com/jcorry/morellis/pkg/models"
)

type FakeStoreRepository struct {
	ActivateFlavorStub        func(int64, int64, int) error
	activateFlavorMutex       sync.RWMutex
	activateFlavorArgsForCall []struct {
		arg1 int64
		arg2 int64
		arg3 int
	}
	activateFlavorReturns struct {
		result1 error
	}
	activateFlavorReturnsOnCall map[int]struct {
		result1 error
	}
	CountStub        func() int
	countMutex       sync.RWMutex
	countArgsForCall []struct {
	}
	countReturns struct {
		result1 int
	}
	countReturnsOnCall map[int]struct {
		result1 int
	}
	DeactivateFlavorStub        func(int64, int64) (bool, error)
	deactivateFlavorMutex       sync.RWMutex
	deactivateFlavorArgsForCall []struct {
		arg1 int64
		arg2 int64
	}
	deactivateFlavorReturns struct {
		result1 bool
		result2 error
	}
	deactivateFlavorReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	DeactivateFlavorAtPositionStub        func(int64, int) (bool, error)
	deactivateFlavorAtPositionMutex       sync.RWMutex
	deactivateFlavorAtPositionArgsForCall []struct {
		arg1 int64
		arg2 int
	}
	deactivateFlavorAtPositionReturns struct {
		result1 bool
		result2 error
	}
	deactivateFlavorAtPositionReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetStub        func(int) (*models.Store, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 int
	}
	getReturns struct {
		result1 *models.Store
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *models.Store
		result2 error
	}
	InsertStub        func(string, string, string, string, string, string, string, string, float64, float64) (*models.Store, error)
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
		arg1  string
		arg2  string
		arg3  string
		arg4  string
		arg5  string
		arg6  string
		arg7  string
		arg8  string
		arg9  float64
		arg10 float64
	}
	insertReturns struct {
		result1 *models.Store
		result2 error
	}
	insertReturnsOnCall map[int]struct {
		result1 *models.Store
		result2 error
	}
	ListStub        func(int, int, string) ([]*models.Store, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 string
	}
	listReturns struct {
		result1 []*models.Store
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*models.Store
		result2 error
	}
	UpdateStub        func(int, string, string, string, string, string, string, string, string, float64, float64) (*models.Store, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1  int
		arg2  string
		arg3  string
		arg4  string
		arg5  string
		arg6  string
		arg7  string
		arg8  string
		arg9  string
		arg10 float64
		arg11 float64
	}
	updateReturns struct {
		result1 *models.Store
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *models.Store
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreRepository) ActivateFlavor(arg1 int64, arg2 int64, arg3 int) error {
	fake.activateFlavorMutex.Lock()
	ret, specificReturn := fake.activateFlavorReturnsOnCall[len(fake.activateFlavorArgsForCall)]
	fake.activateFlavorArgsForCall = append(fake.activateFlavorArgsForCall, struct {
		arg1 int64
		arg2 int64
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("ActivateFlavor", []interface{}{arg1, arg2, arg3})
	fake.activateFlavorMutex.Unlock()
	if fake.ActivateFlavorStub != nil {
		return fake.ActivateFlavorStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.activateFlavorReturns
	return fakeReturns.result1
}

func (fake *FakeStoreRepository) ActivateFlavorCallCount() int {
	fake.activateFlavorMutex.RLock()
	defer fake.activateFlavorMutex.RUnlock()
	return len(fake.activateFlavorArgsForCall)
}

func (fake *FakeStoreRepository) ActivateFlavorCalls(stub func(int64, int64, int) error) {
	fake.activateFlavorMutex.Lock()
	defer fake.activateFlavorMutex.Unlock()
	fake.ActivateFlavorStub = stub
}

func (fake *FakeStoreRepository) ActivateFlavorArgsForCall(i int) (int64, int64, int) {
	fake.activateFlavorMutex.RLock()
	defer fake.activateFlavorMutex.RUnlock()
	argsForCall := fake.activateFlavorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStoreRepository) ActivateFlavorReturns(result1 error) {
	fake.activateFlavorMutex.Lock()
	defer fake.activateFlavorMutex.Unlock()
	fake.ActivateFlavorStub = nil
	fake.activateFlavorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreRepository) ActivateFlavorReturnsOnCall(i int, result1 error) {
	fake.activateFlavorMutex.Lock()
	defer fake.activateFlavorMutex.Unlock()
	fake.ActivateFlavorStub = nil
	if fake.activateFlavorReturnsOnCall == nil {
		fake.activateFlavorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.activateFlavorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreRepository) Count() int {
	fake.countMutex.Lock()
	ret, specificReturn := fake.countReturnsOnCall[len(fake.countArgsForCall)]
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
	}{})
	fake.recordInvocation("Count", []interface{}{})
	fake.countMutex.Unlock()
	if fake.CountStub != nil {
		return fake.CountStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.countReturns
	return fakeReturns.result1
}

func (fake *FakeStoreRepository) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeStoreRepository) CountCalls(stub func() int) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = stub
}

func (fake *FakeStoreRepository) CountReturns(result1 int) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	fake.countReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeStoreRepository) CountReturnsOnCall(i int, result1 int) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	if fake.countReturnsOnCall == nil {
		fake.countReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.countReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeStoreRepository) DeactivateFlavor(arg1 int64, arg2 int64) (bool, error) {
	fake.deactivateFlavorMutex.Lock()
	ret, specificReturn := fake.deactivateFlavorReturnsOnCall[len(fake.deactivateFlavorArgsForCall)]
	fake.deactivateFlavorArgsForCall = append(fake.deactivateFlavorArgsForCall, struct {
		arg1 int64
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("DeactivateFlavor", []interface{}{arg1, arg2})
	fake.deactivateFlavorMutex.Unlock()
	if fake.DeactivateFlavorStub != nil {
		return fake.DeactivateFlavorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deactivateFlavorReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreRepository) DeactivateFlavorCallCount() int {
	fake.deactivateFlavorMutex.RLock()
	defer fake.deactivateFlavorMutex.RUnlock()
	return len(fake.deactivateFlavorArgsForCall)
}

func (fake *FakeStoreRepository) DeactivateFlavorCalls(stub func(int64, int64) (bool, error)) {
	fake.deactivateFlavorMutex.Lock()
	defer fake.deactivateFlavorMutex.Unlock()
	fake.DeactivateFlavorStub = stub
}

func (fake *FakeStoreRepository) DeactivateFlavorArgsForCall(i int) (int64, int64) {
	fake.deactivateFlavorMutex.RLock()
	defer fake.deactivateFlavorMutex.RUnlock()
	argsForCall := fake.deactivateFlavorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreRepository) DeactivateFlavorReturns(result1 bool, result2 error) {
	fake.deactivateFlavorMutex.Lock()
	defer fake.deactivateFlavorMutex.Unlock()
	fake.DeactivateFlavorStub = nil
	fake.deactivateFlavorReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) DeactivateFlavorReturnsOnCall(i int, result1 bool, result2 error) {
	fake.deactivateFlavorMutex.Lock()
	defer fake.deactivateFlavorMutex.Unlock()
	fake.DeactivateFlavorStub = nil
	if fake.deactivateFlavorReturnsOnCall == nil {
		fake.deactivateFlavorReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.deactivateFlavorReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) DeactivateFlavorAtPosition(arg1 int64, arg2 int) (bool, error) {
	fake.deactivateFlavorAtPositionMutex.Lock()
	ret, specificReturn := fake.deactivateFlavorAtPositionReturnsOnCall[len(fake.deactivateFlavorAtPositionArgsForCall)]
	fake.deactivateFlavorAtPositionArgsForCall = append(fake.deactivateFlavorAtPositionArgsForCall, struct {
		arg1 int64
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("DeactivateFlavorAtPosition", []interface{}{arg1, arg2})
	fake.deactivateFlavorAtPositionMutex.Unlock()
	if fake.DeactivateFlavorAtPositionStub != nil {
		return fake.DeactivateFlavorAtPositionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deactivateFlavorAtPositionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreRepository) DeactivateFlavorAtPositionCallCount() int {
	fake.deactivateFlavorAtPositionMutex.RLock()
	defer fake.deactivateFlavorAtPositionMutex.RUnlock()
	return len(fake.deactivateFlavorAtPositionArgsForCall)
}

func (fake *FakeStoreRepository) DeactivateFlavorAtPositionCalls(stub func(int64, int) (bool, error)) {
	fake.deactivateFlavorAtPositionMutex.Lock()
	defer fake.deactivateFlavorAtPositionMutex.Unlock()
	fake.DeactivateFlavorAtPositionStub = stub
}

func (fake *FakeStoreRepository) DeactivateFlavorAtPositionArgsForCall(i int) (int64, int) {
	fake.deactivateFlavorAtPositionMutex.RLock()
	defer fake.deactivateFlavorAtPositionMutex.RUnlock()
	argsForCall := fake.deactivateFlavorAtPositionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreRepository) DeactivateFlavorAtPositionReturns(result1 bool, result2 error) {
	fake.deactivateFlavorAtPositionMutex.Lock()
	defer fake.deactivateFlavorAtPositionMutex.Unlock()
	fake.DeactivateFlavorAtPositionStub = nil
	fake.deactivateFlavorAtPositionReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) DeactivateFlavorAtPositionReturnsOnCall(i int, result1 bool, result2 error) {
	fake.deactivateFlavorAtPositionMutex.Lock()
	defer fake.deactivateFlavorAtPositionMutex.Unlock()
	fake.DeactivateFlavorAtPositionStub = nil
	if fake.deactivateFlavorAtPositionReturnsOnCall == nil {
		fake.deactivateFlavorAtPositionReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.deactivateFlavorAtPositionReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) Get(arg1 int) (*models.Store, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeStoreRepository) GetCalls(stub func(int) (*models.Store, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeStoreRepository) GetArgsForCall(i int) int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStoreRepository) GetReturns(result1 *models.Store, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) GetReturnsOnCall(i int, result1 *models.Store, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *models.Store
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) Insert(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string, arg6 string, arg7 string, arg8 string, arg9 float64, arg10 float64) (*models.Store, error) {
	fake.insertMutex.Lock()
	ret, specificReturn := fake.insertReturnsOnCall[len(fake.insertArgsForCall)]
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
		arg1  string
		arg2  string
		arg3  string
		arg4  string
		arg5  string
		arg6  string
		arg7  string
		arg8  string
		arg9  float64
		arg10 float64
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10})
	fake.recordInvocation("Insert", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10})
	fake.insertMutex.Unlock()
	if fake.InsertStub != nil {
		return fake.InsertStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.insertReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreRepository) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeStoreRepository) InsertCalls(stub func(string, string, string, string, string, string, string, string, float64, float64) (*models.Store, error)) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = stub
}

func (fake *FakeStoreRepository) InsertArgsForCall(i int) (string, string, string, string, string, string, string, string, float64, float64) {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	argsForCall := fake.insertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9, argsForCall.arg10
}

func (fake *FakeStoreRepository) InsertReturns(result1 *models.Store, result2 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 *models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) InsertReturnsOnCall(i int, result1 *models.Store, result2 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	if fake.insertReturnsOnCall == nil {
		fake.insertReturnsOnCall = make(map[int]struct {
			result1 *models.Store
			result2 error
		})
	}
	fake.insertReturnsOnCall[i] = struct {
		result1 *models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) List(arg1 int, arg2 int, arg3 string) ([]*models.Store, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreRepository) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeStoreRepository) ListCalls(stub func(int, int, string) ([]*models.Store, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeStoreRepository) ListArgsForCall(i int) (int, int, string) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStoreRepository) ListReturns(result1 []*models.Store, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) ListReturnsOnCall(i int, result1 []*models.Store, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*models.Store
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) Update(arg1 int, arg2 string, arg3 string, arg4 string, arg5 string, arg6 string, arg7 string, arg8 string, arg9 string, arg10 float64, arg11 float64) (*models.Store, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1  int
		arg2  string
		arg3  string
		arg4  string
		arg5  string
		arg6  string
		arg7  string
		arg8  string
		arg9  string
		arg10 float64
		arg11 float64
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11})
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeStoreRepository) UpdateCalls(stub func(int, string, string, string, string, string, string, string, string, float64, float64) (*models.Store, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeStoreRepository) UpdateArgsForCall(i int) (int, string, string, string, string, string, string, string, string, float64, float64) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9, argsForCall.arg10, argsForCall.arg11
}

func (fake *FakeStoreRepository) UpdateReturns(result1 *models.Store, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) UpdateReturnsOnCall(i int, result1 *models.Store, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *models.Store
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *models.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateFlavorMutex.RLock()
	defer fake.activateFlavorMutex.RUnlock()
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	fake.deactivateFlavorMutex.RLock()
	defer fake.deactivateFlavorMutex.RUnlock()
	fake.deactivateFlavorAtPositionMutex.RLock()
	defer fake.deactivateFlavorAtPositionMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.StoreRepository = new(FakeStoreRepository)
