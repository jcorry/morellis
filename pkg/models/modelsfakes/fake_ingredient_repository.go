// Code generated by counterfeiter. DO NOT EDIT.
package modelsfakes

import (
	"sync"

	"github.com/jcorry/morellis/pkg/models"
)

type FakeIngredientRepository struct {
	GetStub        func(int64) (*models.Ingredient, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 int64
	}
	getReturns struct {
		result1 *models.Ingredient
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *models.Ingredient
		result2 error
	}
	GetByNameStub        func(string) (*models.Ingredient, error)
	getByNameMutex       sync.RWMutex
	getByNameArgsForCall []struct {
		arg1 string
	}
	getByNameReturns struct {
		result1 *models.Ingredient
		result2 error
	}
	getByNameReturnsOnCall map[int]struct {
		result1 *models.Ingredient
		result2 error
	}
	InsertStub        func(*models.Ingredient) (*models.Ingredient, error)
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
		arg1 *models.Ingredient
	}
	insertReturns struct {
		result1 *models.Ingredient
		result2 error
	}
	insertReturnsOnCall map[int]struct {
		result1 *models.Ingredient
		result2 error
	}
	SearchStub        func(int, int, string, []string) ([]*models.Ingredient, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 string
		arg4 []string
	}
	searchReturns struct {
		result1 []*models.Ingredient
		result2 error
	}
	searchReturnsOnCall map[int]struct {
		result1 []*models.Ingredient
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIngredientRepository) Get(arg1 int64) (*models.Ingredient, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIngredientRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeIngredientRepository) GetCalls(stub func(int64) (*models.Ingredient, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeIngredientRepository) GetArgsForCall(i int) int64 {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIngredientRepository) GetReturns(result1 *models.Ingredient, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) GetReturnsOnCall(i int, result1 *models.Ingredient, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *models.Ingredient
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) GetByName(arg1 string) (*models.Ingredient, error) {
	fake.getByNameMutex.Lock()
	ret, specificReturn := fake.getByNameReturnsOnCall[len(fake.getByNameArgsForCall)]
	fake.getByNameArgsForCall = append(fake.getByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByName", []interface{}{arg1})
	fake.getByNameMutex.Unlock()
	if fake.GetByNameStub != nil {
		return fake.GetByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIngredientRepository) GetByNameCallCount() int {
	fake.getByNameMutex.RLock()
	defer fake.getByNameMutex.RUnlock()
	return len(fake.getByNameArgsForCall)
}

func (fake *FakeIngredientRepository) GetByNameCalls(stub func(string) (*models.Ingredient, error)) {
	fake.getByNameMutex.Lock()
	defer fake.getByNameMutex.Unlock()
	fake.GetByNameStub = stub
}

func (fake *FakeIngredientRepository) GetByNameArgsForCall(i int) string {
	fake.getByNameMutex.RLock()
	defer fake.getByNameMutex.RUnlock()
	argsForCall := fake.getByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIngredientRepository) GetByNameReturns(result1 *models.Ingredient, result2 error) {
	fake.getByNameMutex.Lock()
	defer fake.getByNameMutex.Unlock()
	fake.GetByNameStub = nil
	fake.getByNameReturns = struct {
		result1 *models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) GetByNameReturnsOnCall(i int, result1 *models.Ingredient, result2 error) {
	fake.getByNameMutex.Lock()
	defer fake.getByNameMutex.Unlock()
	fake.GetByNameStub = nil
	if fake.getByNameReturnsOnCall == nil {
		fake.getByNameReturnsOnCall = make(map[int]struct {
			result1 *models.Ingredient
			result2 error
		})
	}
	fake.getByNameReturnsOnCall[i] = struct {
		result1 *models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) Insert(arg1 *models.Ingredient) (*models.Ingredient, error) {
	fake.insertMutex.Lock()
	ret, specificReturn := fake.insertReturnsOnCall[len(fake.insertArgsForCall)]
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
		arg1 *models.Ingredient
	}{arg1})
	fake.recordInvocation("Insert", []interface{}{arg1})
	fake.insertMutex.Unlock()
	if fake.InsertStub != nil {
		return fake.InsertStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.insertReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIngredientRepository) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeIngredientRepository) InsertCalls(stub func(*models.Ingredient) (*models.Ingredient, error)) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = stub
}

func (fake *FakeIngredientRepository) InsertArgsForCall(i int) *models.Ingredient {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	argsForCall := fake.insertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIngredientRepository) InsertReturns(result1 *models.Ingredient, result2 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 *models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) InsertReturnsOnCall(i int, result1 *models.Ingredient, result2 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	if fake.insertReturnsOnCall == nil {
		fake.insertReturnsOnCall = make(map[int]struct {
			result1 *models.Ingredient
			result2 error
		})
	}
	fake.insertReturnsOnCall[i] = struct {
		result1 *models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) Search(arg1 int, arg2 int, arg3 string, arg4 []string) ([]*models.Ingredient, error) {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.searchMutex.Lock()
	ret, specificReturn := fake.searchReturnsOnCall[len(fake.searchArgsForCall)]
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	fake.recordInvocation("Search", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.searchMutex.Unlock()
	if fake.SearchStub != nil {
		return fake.SearchStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIngredientRepository) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeIngredientRepository) SearchCalls(stub func(int, int, string, []string) ([]*models.Ingredient, error)) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = stub
}

func (fake *FakeIngredientRepository) SearchArgsForCall(i int) (int, int, string, []string) {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	argsForCall := fake.searchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIngredientRepository) SearchReturns(result1 []*models.Ingredient, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 []*models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) SearchReturnsOnCall(i int, result1 []*models.Ingredient, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	if fake.searchReturnsOnCall == nil {
		fake.searchReturnsOnCall = make(map[int]struct {
			result1 []*models.Ingredient
			result2 error
		})
	}
	fake.searchReturnsOnCall[i] = struct {
		result1 []*models.Ingredient
		result2 error
	}{result1, result2}
}

func (fake *FakeIngredientRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getByNameMutex.RLock()
	defer fake.getByNameMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIngredientRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.IngredientRepository = new(FakeIngredientRepository)
